import numpy as np
import time
from ezGraph import *

def avg1(lst):
    s = 0
    n = 0
    for i in lst:
        s += i
        n += 1
    return s/n


#Finite difference model

#parameters
dt = 1.
nsteps = 30

r = 2.25    #radius in cm
q = 30       #volume inflow rate cm/sec
h = 50       #initial height in cm
k = 5.0       #outflow rate constant

# expiremental data (filling)
#x_measured = [1, 7, 12, 17, 22, 26]
#y_measured = [0, 10, 20, 30, 40, 50]
#y_modeled = []

#expiremental data (draining)
x_measured = [1, 7, 12, 17, 22, 26]
y_measured = [0, 10, 20, 30, 40, 50]
y_modeled = []


#graph
graph = ezGraphMM(xmax= 30,ymax= 50,xLabel= "Time (s)", yLabel= "Height (cm)", x_measured = x_measured, y_measured = y_measured)
graph.addModeled(0,h)       #add initial values


#time loop
for t in range(1,nsteps): 
    modeltime = t * dt

    #filling
    #dh = q * dt / (np.pi * r ** 2)          #find the change in height
    #h = h + dh 
                     #update height
    #draining
    dvdt = -k * h
    dh = dvdt * dt / (np.pi * r ** 2)
    h += dh

    if (modeltime in x_measured):
        print(modeltime,h) 
        y_modeled.append(h)              #(modeltime,h)
        graph.addModeled(modeltime,h)
        graph.wait(.1)

print("h measured:", y_measured)
print("h modeled:", y_modeled)

#calculate average values for y_measured and y_modeled
avgy = avg1(y_measured)
avgym = avg1(y_modeled)

print("average h measured:",avgy)
print("average h modeled:" , avgym)

def residual(lst1,lst2):
    n = len(lst1)
    s = 0
    for i in range(n):
        d = (lst1[i] - lst2[i])
        s += d
    return s

def residualsq(lst1,lst2):
    n = len(lst1)
    s = 0
    for i in range(n):
        d = (lst1[i] - lst2[i]) ** 2
        s += d
        print(i, lst1[i], lst2[i], d, s)
    return s

ressq = residualsq(y_measured,y_modeled)
print(ressq)

def dsq(lst1):
    n = len(lst1)
    s = 0
    for i in range(n):
        d = (lst1[i] - avgy) ** 2
        s += d
    return s


r2 = 1 - (ressq / dsq(y_measured))

print(r2)

# draw graph
graph.keepOpen()